Normalmente dentro de una función JS utilizaríamos los datos declarando variables en su interior del tipo:
    ex: 
        class App extends Component{
            var myVar = "Carlos";

            render(){
                return(</>);
            }
        }

PERO NO!
Dentro de las clases no declaramos las variables. Se haría del tipo:
    ex: 
        class App extends Component{
            myVar = "Carlos";   // Sin let ni var

            render(){
                return(</>);
            }
        }

PERO TAMPOCO!
Al extender de un 'Component' funciona de otra manera.
Igual que tenemos las props, que proceden de fuera del componente y que son recibidas como parámetros, tenemos la palabra reservada:
    STATE
para la gestión de datos de forma INTERNA al propio componente.

De todas formas, con la introducción de HOOKS esto se trabaja también de otra manera /ver más adelante...

El valor de state tiene que ser un JS Object.

Dentro de la definición de la clase/función, la palabra 'this' se refiere a la clase, por lo que la podemos utilizar dentro del método render para referirnos al state.
    ex: 
        class App extends Component{
            state =  {developer="Carlos"}

            render(){
                return(<Task developer={this.state.developer} />);
            }
        }

State se utiliza como una variable normal, pero lo que tiene de especial es que cuando se modifica es cuando React reacciona para volver a renderizar el DOM. De otra manera no actualiza la vista. Es la variable que React "vigila" del componente.

